""" "Map leader to space "
let mapleader = " "





" ============================ MAPPINGS ============================"
"
" ---------------------------- NORMAL ------------------------------
"   ............. GLOBALS KEYS ...............
"
"   Y - Yank to the end of the line
"   Q - Plays back q macro.
"   L - Change to left buffer tab
"   H - Change to right buffer tab
"   jj - ESC
"   jk - ESC
"
"   <leader>'  - easymotion everywhere on file
"   Ef  - easymotion everywhere on line
"   El  - easymotion everywhere on line
"   En  - go to next easymotion match
"   EN  - go to prev easymotion match
"
"   [[  -  navigate to previous method
"   ]]  -  navigate to previous method
"
"   ]]  -  navigate to previous method
"   ]]  -  navigate to previous method
"
"   !  -  Inverts words
"   '  -  Shows Bookmarks
"
"   zk - collapse region
"   zj - expand region
"   zK - collapse all regions
"   zJ - collapse all regions
"   zb - collapse doc comments
"
"   gd - Go to declaration
"   gi - Go to implementation
"   ge - Go to next error
"   gE - Go to prev error
"   go - Open Generate menu
"   ga - Opens Action search menu
"   gc - Opens Class search menu
"   gf - Opens Files search menu
"   gs - Opens Symbol search menu
"
"   cs  - change surround - cs"' or cs"(
"   cs  - delete surround - ds" or ds(
"   ys  - add surround - ysw" or ysiw(
"   S  -  shorthand for ysiW
"
"   ,r  - Runs current run configuration
"   ,R  - Opens Run Menu
"   ,c  - Runs current class file if able
"   ,f  - Opens choose run configuration menu
"   ,t  - Activates Run tool window
"   ,u  - Rerun last run configuration
"   ,b  - Toggle line breakpoint
"   ,d  - Context Debug
"   ,n  - Activates Debug tool window
"   ,i  - Opens Run Inspection menu
"
"   ............. ALT KEYS ...............
"
"    a-r - refresh IdeaVim config
"    a-v - Split vertically
"    a-h - Split horizontally
"    a-u - Unsplit
"    a-m -
"    a-= - Increase Font Size
"    a-- - Decrease Font Size
"    a-. - Reset Font Side to default
"    a-; - Reset Font Side to default
"
"   ............. Control KEYS ...............
"
"   C-z  - Toggles Zen mode
"   C-a  - Selects whole file
"
"   ............. LEADER KEYS ...............
"
"    <leader>e - Toggle NERDTree
"    <leader>. - Focuses the NERDTree panel on the current opened file
"    <leader>nf - Focuses NERDTree panel
"
"    <leader>h - Navigate to left split
"    <leader>j - Navigate to bottom split
"    <leader>k - Navigate to upper split
"    <leader>l - Navigate to right split
"
"    <leader>c  - Closes current buffer tab
"    <leader>x  - Reopens last closed buffer tab
"    <leader>f  - Opens Find in Path search
"    <leader>/  - Comments current line
"    <leader>=  - Reformat code
"    <leader>g  - Toggles git blame
"    <leader>su - Shows usages
"
"    <leader>ba - Closes All buffer tabs
"    <leader>bc - Closes All buffer tabs except for active buffer
"    <leader>bl - Closes all buffer tabs on the right
"    <leader>bh - Closes all buffer tabs on the left
"    <leader>bp - Closes All unpinned buffer tabs
"    <leader>bu - Closes all unmodified buffer tabs
"    <leader>bt - Pins active buffer tab
"    <leader>b1 - Go to first tab
"    <leader>bj - Go to first tab
"    <leader>bk - Go to last tab
"
"    <leader>ps - Opens class structure window
"    <leader>pd - Show Error Description
"    <leader>pe - Rename Element
"    <leader>pf - Rename File
"    <leader>pc - Close Project
"    <leader>pt - Opens Actions menu
"    <leader>py - Copy File Name
"    <leader>pn - Open new File menu
"    <leader>pm - Open new Module menu
"    <leader>pp - Open new Project menu
"    <leader>po - Override Methods if any
"    <leader>pb - Show Bookmarks
"    <leader>pr - Open Replace
"    <leader>pR - Open Replace In Path
"    <leader>px - Open Refactor menu
"
"    <leader>rf - Opens Recent changed Files window
"    <leader>rr - Opens Recent changes window
"    <leader>rl - Opens Recent locations window
"    <leader>rp - Open Refactor menu
"    <leader>ri - Insert Random Integer
"    <leader>rI - Insert Random Integer Array
"    <leader>rd - Insert Random Decimal
"    <leader>rD - Insert Random Decimal Array
"    <leader>rs - Insert Random String
"    <leader>rS - Insert Random String Array
"    <leader>ru - Insert Random UUID
"    <leader>rU - Insert Random UUID Array
"    <leader>rw - Insert Random Word
"    <leader>rW - Insert Random Word Array
"    <leader>rg - Opens randomness menu
"
"    <leader>md - Opens Color Picker
"    <leader>mf - Show File Path
"    <leader>ml - Opens logs location in file manager
"    <leader>ms - Opens Project Structure settings
"    <leader>mx - Opens Settings
"
" ---------------------------- VISUAL ------------------------------
"
"   ............. GLOBALS KEYS ...............
"
"    L - Select to the end of the line
"    H - Select to the start of the line
"    <BS> - Select to the previous paragraph
"    <CR> - Select to the next paragraph
"
"   ............. LEADER KEYS ...............
"
"    <leader>y - Copy reference
"    <leader>r - Replace
"    <leader>p - ReplaceInPath
"
"



" =================== Common settings ===================
set incsearch
set noerrorbells
set visualbell                " removes errorbells
set idearefactormode=visual
set smartcase
set ignorecase
set ideamarks

set relativenumber

set showmode
set number
set scrolloff=9
set sidescrolloff=5
set history=100001

set clipboard+=unnamed
set clipboard+=ideaput

set ideajoin

" ========== CUSTOM TEXT OBJECTS ========== 

nnoremap ci/ T/ct/
nnoremap ca/ F/ct/
nnoremap ci, T,ct,
nnoremap ca, F,ct,
nnoremap ci. T.ct.
nnoremap ca. F.ct.
nnoremap ci_ T_ct_
nnoremap ca_ F_ct_
nnoremap ci- T-ct-
nnoremap ca- F-ct-
nnoremap ci% T%ct%
nnoremap ca% F%ct%
nnoremap ci= T=ct=
nnoremap ca= F=ct=
nnoremap ci? T?ct?
nnoremap ca? F?ct?
nnoremap ci! T!ct!
nnoremap ca! F!ct!
nnoremap ci& T&ct&
nnoremap ca& F&ct&
nnoremap di/ T/dt/
nnoremap da/ F/dt/
nnoremap di, T,dt,
nnoremap da, F,dt,
nnoremap di. T.dt.
nnoremap da. F.dt.
nnoremap di_ T_dt_
nnoremap da_ F_dt_
nnoremap di- T-dt-
nnoremap da- F-dt-
nnoremap di% T%dt%
nnoremap da% F%dt%
nnoremap di= T=dt=
nnoremap da= F=dt=
nnoremap di? T?dt?
nnoremap da? F?dt?
nnoremap di! T!dt!
nnoremap da! F!dt!
nnoremap di& T&dt&
nnoremap da& F&dt&
nnoremap vi/ T/vt/
nnoremap va/ F/vt/
nnoremap vi, T,vt,
nnoremap va, F,vt,
nnoremap vi. T.vt.
nnoremap va. F.vt.
nnoremap vi_ T_vt_
nnoremap va_ F_vt_
nnoremap vi- T-vt-
nnoremap va- F-vt-
nnoremap vi% T%vt%
nnoremap va% F%vt%
nnoremap vi= T=vt=
nnoremap va= F=vt=
nnoremap vi? T?vt?
nnoremap va? F?vt?
nnoremap vi! T!vt!
nnoremap va! F!vt!
nnoremap vi& T&vt&
nnoremap va& F&vt&
nnoremap yi/ T/yt/
nnoremap ya/ F/yt/
nnoremap yi, T,yt,
nnoremap ya, F,yt,
nnoremap yi. T.yt.
nnoremap ya. F.yt.
nnoremap yi_ T_yt_
nnoremap ya_ F_yt_
nnoremap yi- T-yt-
nnoremap ya- F-yt-
nnoremap yi% T%yt%
nnoremap ya% F%yt%
nnoremap yi= T=yt=
nnoremap ya= F=yt=
nnoremap yi? T?yt?
nnoremap ya? F?yt?
nnoremap yi! T!yt!
nnoremap ya! F!yt!
nnoremap yi& T&yt&
nnoremap ya& F&yt&

" ========== "ALIASES" ==========
" copy to end of line"
nmap Y y$
inoremap jj <ESC>
inoremap jk <ESC>

" Clear highlights.
nnoremap <Esc> <Esc>:noh<CR>
nmap ' <Action>(ShowBookmarks)

" Q plays back q macro.
nnoremap Q @q

vnoremap < <gv
vnoremap > >gv

vmap <BS> {
vmap <CR> }

nmap + viB
vmap + vviB

vmap L $
vmap H 1

" replace currently selected text with default register without yanking it
vnoremap p "_dP

" "open ideavimrc file"
nnoremap \e :e ~/.ideavimrc<CR>
nmap <a-r> <action>(IdeaVim.ReloadVimRc.reload)

" ========== "Highlighted Yank" =============

set highlightedyank
let g:highlightedyank_highlight_duration = '300'
let g:highlightedyank_highlight_color = 'rgb(131, 148, 150, 120)'

" ========== "NERDTree" =============
set NERDTree
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpParent='h'

nnoremap <leader>e :NERDTreeToggle<CR>
nnoremap <leader>. :NERDTreeFind<CR>
nnoremap <leader>nf :NERDTreeFocus<CR>

" ========== "EasyMotion" ==========
Plug 'easymotion/vim-easymotion'
set easymotion
let g:EasyMotion_keys = 'asdfghjkl;qwertyuiopzxcvbnm'
let g:EasyMotion_do_mapping = 1
"nmap F <Plug>(easymotion-f)
map <leader>' <Plug>(easymotion-jumptoanywhere)
map Ef <Plug>(easymotion-lineanywhere)
map El <Plug>(easymotion-lineanywhere)
map En <Plug>(easymotion-next)
map EN <Plug>(easymotion-prev)

" ========== "Surround" =============
Plug 'tpope/vim-surround'
set surround

nmap S ysiW

" This plugin adds four main commands in normal mode
"   - cs: To change the surroundings.
"   - ds: To delete the surroundings.
"   - ys: To add surroundings.
"   - S: To surround the currently selected text.
" The following are some commands that I usually use. However, you can check the documentation for more:
"
"   - cs”’: Change the surrounding from double quotes to single quotes.
"   - ds”: Delete the closest double-quotes surroundings.
"   - ysiw<b>: Surround the current word with <b> tag (iw means inner word.)

" ========== "SPLITS" =============
" "move between split windows"
nnoremap <leader>h <C-W><C-H>
nnoremap <leader>j <C-W><C-J>
nnoremap <leader>k <C-W><C-K>
nnoremap <leader>l <C-W><C-L>

nmap <a-v> <action>(SplitVertically)
nmap <a-h> <action>(SplitHorizontally)
nmap <a-u> <action>(Unsplit)
nmap <a-m> <action>(MoveEditorToOppositeTabGroup)

" --- Fonts
nmap <a-=> <action>(EditorIncreaseFontSizeGlobal)
nmap <a--> <action>(EditorDecreaseFontSizeGlobal)
nmap <a-.> <action>(EditorResetFontSize)
nmap <a-;> <action>(EditorResetFontSize)

" ========== "NAVIGATION" =============
" "TAB in normal mode will move to text buffer"
" nnoremap <silent> <TAB> gt
" "SHIFT-TAB will go back"
" nnoremap <silent> <S-TAB> gT

nnoremap <silent> L gt
nnoremap <silent> H gT

" "navigates to next and previous method"
nmap [[ <action>(MethodUp)
nmap ]] <action>(MethodDown)

" ========== "FOLDING" ==========

nmap zk <action>(CollapseRegion)
nmap zj <action>(ExpandRegion)
nmap zK <action>(CollapseAllRegions)
nmap zJ <action>(ExpandAllRegions)
nmap zb <action>(CollapseDocComments)

" CollapseDocComments
" ExpandDocComments

" ========== "PROJECT NAVIGATION" ==========

nmap gd <action>(GotoDeclaration)
nmap gi <action>(GotoImplementation)
nmap ge <action>(GotoNextError)
nmap gE <action>(GotoPreviousError)
nmap ga <action>(GotoAction)
nmap gc <action>(GotoClass)
nmap gf <action>(GotoFile)
nmap gs <action>(GotoSymbol)

nmap go <action>(Generate)

" ========== "GLOBALS" ==========

" -- ZEN mode
nmap <C-z> <action>(ToggleDistractionFreeMode)
nmap <C-a> gg<S-v>G

nmap <leader>c <action>(CloseEditor)
nmap <leader>x <action>(ReopenClosedTab)
nmap <leader>f <action>(FindInPath)
nmap <leader>/ <action>(CommentByLineComment)
" Toggle git-blame window
nmap <leader>g <action>(Annotate)
vmap <leader>y <action>(CopyReference)


" ========== "BUFFERS" ==========

nmap <leader>ba <action>(CloseAllEditors)
nmap <leader>bc <action>(CloseAllEditorsButActive)
nmap <leader>bl <action>(CloseAllToTheRight)
nmap <leader>bh <action>(CloseAllToTheLeft)
nmap <leader>bp <action>(CloseAllUnpinnedEditors)
nmap <leader>bu <action>(CloseAllUnmodifiedEditors)
nmap <leader>bt <action>(PinActiveTabToggle)
nmap <leader>b1 <action>(GoToTab1)
nmap <leader>bj <action>(GoToTab2)
nmap <leader>bk <action>(GoToLastTab)

" ========== "PROJECT" ==========

" "Show file methods in popup"
nmap <leader>ps <action>(FileStructurePopup)
nmap <leader>pd <action>(ShowErrorDescription)
nmap <leader>pe <action>(RenameElement)
nmap <leader>pf <action>(RenameFile)
nmap <leader>pc <action>(CloseProject)
nmap <leader>pt <action>(Actions)
nmap <leader>py <action>(CopyFileName)
nmap <leader>pn <action>(NewElement)
nmap <leader>pm <action>(NewModule)
nmap <leader>pp <action>(NewProject)
nmap <leader>po <action>(OverrideMethods)
nmap <leader>pb <action>(ShowBookmarks)
" nmap <leader>pm <action>(NewFile)
" nmap <leader>pN <action>(NewFolder)

" nnoremap <leader>pr :%s/
vmap <leader>r <Action>(Replace)
nmap <leader>pr <action>(Replace)
vmap <leader>p <Action>(ReplaceInPath)
nmap <leader>pR <action>(ReplaceInPath)
nmap <leader>px <action>(Refactorings.QuickListPopupAction)

" ========== "RECENT AND RANDOM" ==========

" --- RECENT
nmap <leader>rf <action>(RecentChangedFiles)
nmap <leader>rr <action>(RecentChanges)
nmap <leader>rl <action>(RecentLocations)

" --- Refactoring
nmap <leader>rp <action>(Refactorings.QuickListPopupAction)

" --- Randomness
nmap <leader>ri <action>(randomness.InsertInteger)
nmap <leader>rI <action>(randomness.InsertIntegerArray)

nmap <leader>rd <action>(randomness.InsertDecimal)
nmap <leader>rD <action>(randomness.InsertDecimalArray)

nmap <leader>rs <action>(randomness.InsertString)
nmap <leader>rS <action>(randomness.InsertStringArray)

nmap <leader>ru <action>(randomness.InsertUuid)
nmap <leader>rU <action>(randomness.InsertUuidArray)

nmap <leader>rw <action>(randomness.InsertWord)
nmap <leader>rW <action>(randomness.InsertWordArray)

nmap <leader>rg <action>(randomness.ShowGroup)

" ========== "DEBUGGING" ==========

nmap ,r <action>(Run)
nmap ,R <action>(RunMenu)
nmap ,c <action>(RunClass)
nmap ,f <action>(ChooseRunConfiguration)
nmap ,t <action>(ActivateRunToolWindow)
nmap ,u <action>(Rerun)
nmap ,b <action>(ToggleLineBreakpoint)
nmap ,d <action>(ContextDebug)
nmap ,n <action>(ActivateDebugToolWindow)
nmap ,i <action>(RunInspection)
" nmap <leader>cd <action>(ChooseDebugConfiguration)
" nmap ,r <action>ContextRun
" nmap ,f <action>RerunFailedTests

" ========== "MISC" ==========

" nmap <leader>en <action>(EditSourceInNewWindow)
nmap <leader>=  <action>(ReformatCode)
" nmap <leader>o <action>(OptimizeImports)
" nmap <leader>/ <action>(Find)
nmap <leader>su <action>(ShowUsages)
nmap <leader>md <action>(ShowColorPicker)
nmap <leader>mf <action>(ShowFilePath)
nmap <leader>ml <action>(ShowLog)
nmap <leader>ms <action>(ShowProjectStructureSettings)
nmap <leader>mx <action>(ShowSettings)




" Replaces word with it's opposite meaning. Example: true -> false, start -> end ...
function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif

  let wordUnderCaret = @w
  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'

  let count = 1
  while (count < len(antonyms))

    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 3 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif

    let count += 2

  endwhile
endfunction

nnoremap ! :call Invert(1)<CR>
vnoremap ! :<C-u>call Invert(2)<CR>